package questions;import java.util.HashMap;import java.util.HashSet;import java.util.Map;import java.util.Set; public class Solution{public static int maxPoints(int[][]points) {int n=points.length;        if(n<2){return n;        }Set<String> set=new HashSet<>();        int max=1;        for(int i=0; i<n && !set.contains(points[i][0]+"=" + points[i][1]);i++) {int same=0;            Map<Double,Integer>map=new HashMap<>();            int localMax=1;            for(int j=i+1;j<n;j++) {if (issame(points[i], points[j])) {same++;                    continue;                }double slope=getSlope(points[i],points[j]);                map.put(slope,map.getOrDefault(slope, 1) + 1);                localMax=Math.max(localMax, map.get(slope));            }set.add(points[i][0]+"-"+points[i][1]);            max=Math.max(max,localMax + same);        }return max;    }private static boolean issame(int[] a,int[] b) {return a[0]==b[0] && a[1]==b[1];    }private static double getSlope(int[]a,int[]b) {if(a[0]==b[0]) return Double.MAX_VALUE;        if(a[1]==b[1]) return 0;        return((double) b[1]-a[1])/((double) b[0]-a[0]);//slope of the points in a straight line.    }public static void main(String args[]) //static method     {int[][] input = {{1,2}, {5,5}, {1,4}, {2,3}, {3,2}, {4,1}, {3,5}};         System.out.println(maxPoints(input));     }}
